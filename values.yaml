# Default values for atlassian-jira.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: atlassian/confluence-server
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 8090

##
## ingress: Configure ingress resource that allow you to access the instalation.
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  enabled: false
  ## Ingress annotations done as key:value pairs
  ## If you're using kube-lego, you will want to add:
  ## kubernetes.io/tls-acme: true
  ##
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  ##
  ## If tls is set to true, annotation ingress.kubernetes.io/secure-backends: "true" will automatically be set
  annotations:
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: true
  path: /
  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

##
## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 8Gi
##
## JIRA runs in a Java virtual machine (JVM), and this JVM is allocated an amount of 
## memory to enable JIRA to run. These amounts can be manually configured.
## The maximum memory allocation pool (-Xmx) is required to be at least 786m.
##
jvm:
  minimumMemory: 256m
  maximumMemory: 786m
##
## additionalEnv: Pass additional environment variables to the JVM
##
additionalEnv:
  - name: test
    value: 123
  - name: somethingelse
    value: "asdf asdf asdf"
##
## The host and port properties indicate the proxy server and the port that the HTTP 
## protocol handler will use. (https://confluence.atlassian.com/jirakb/how-to-configure-an-outbound-http-and-https-proxy-for-jira-applications-247857187.html)
##
proxy:
  enabled: false
  host: "foo.bar.com"
  port: 443
  scheme: https
  path: /secure

##
## resources: Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
##
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
##
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi
##
## Configure Liveness and Readiness Probes
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
## livenessProbe: Many applications running for long periods of time eventually transition to broken
## states, and cannot recover except by being restarted. Kubernetes provides liveness probes to detect and remedy such situations.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
##
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
##
## readinessProbe: Sometimes, applications are temporarily unable to serve traffic. For example, an application  
## might need to load large data or configuration files during startup. In such cases, you don’t want to kill 
## the application, but you don’t want to send it requests either.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#define-readiness-probes
##
readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
##
## nodeSelector: For the pod to be eligible to run on a node, the node must have each of the  
## indicated key-value pairs as labels (it can have additional labels as well)
## ref: https://kubernetes.io/docs/user-guide/node-selection/ (kubectl get nodes --show-labels)
##
nodeSelector:
  # disktype: ssd
##
## tolerations: Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes.
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
##
## affinity: There are currently two types of node affinity, called requiredDuringSchedulingIgnoredDuringExecution 
## and preferredDuringSchedulingIgnoredDuringExecution. You can think of them as “hard” and “soft” respectively
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

